# Deploy to Azure Kubernetes Service

# Build and push image to Azure Container Registry; Deploy to Azure Kubernetes Service
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
- master

resources:
- repo: self

variables:

  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: 'c45aa3e4-3c35-4055-8024-ccc9e2be55e2'
  imageRepository: 'hellovue'
  containerRegistry: 'k8sexampleregistry.azurecr.io'
  dockerfilePath: '**/Dockerfile'
  tag: '$(Build.BuildId)'
  imagePullSecret: 'k8sexampleregistry5580-auth'
  imageName: $(containerRegistry)/$(imageRepository):$(tag)

  # Agent VM image name
  vmImageName: 'ubuntu-latest'


stages:
- stage: Scan
  displayName: Scan stage
  jobs:
  - job: Scan
    displayName: Scan
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: SonarQubePrepare@5
      inputs:
        SonarQube: 'SonarQube'
        scannerMode: 'CLI'
        configMode: 'manual'
        cliProjectKey: 'SynnexPOC_SynnexPOC'
        cliSources: '.'
        extraProperties: |
          # Additional properties that will be passed to the scanner, 
          # Put one key=value per line, example:
          # sonar.exclusions=**/*.bin
          sonar.branch.name=master
    - task: SonarQubeAnalyze@5
    - task: SonarQubePublish@5
      inputs:
        pollingTimeoutSec: '300'

- stage: Build
  displayName: Build stage
  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Docker@2
      displayName: Build image
      inputs:
        containerRegistry: 'K8SExampleRegistry'
        repository: '$(imageRepository)'
        command: 'build'
        Dockerfile: '**/Dockerfile'
        tags: '$(tag)'

    - script: |
        export TRIVY_VERSION=$(wget -qO - "https://api.github.com/repos/aquasecurity/trivy/releases/latest" | grep '"tag_name":' | sed -E 's/.*"v([^"]+)".*/\1/')
        echo "Trivy version: $TRIVY_VERSION"
        wget --no-verbose https://github.com/aquasecurity/trivy/releases/download/v${TRIVY_VERSION}/trivy_${TRIVY_VERSION}_Linux-64bit.tar.gz -O - | tar -zxvf -
        ./trivy -v
      displayName: 'Download and install Trivy'

    - task: CmdLine@2
      displayName: "Run trivy scan"
      inputs:
        script: |
          ./trivy image --exit-code 0 --severity LOW,MEDIUM,HIGH --format template --template "@contrib/junit.tpl" -o $(System.DefaultWorkingDirectory)/junit-report-low-med-high.xml $(imageName)
          ./trivy image --exit-code 0 --severity CRITICAL --format template --template "@contrib/junit.tpl" -o $(System.DefaultWorkingDirectory)/junit-report-critical.xml $(imageName)

    - task: PublishTestResults@2
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '**/junit-report-*.xml'
        mergeTestResults: true
        testRunTitle: 'Trivy Scan Vulnerabilities'
      condition: always()

    - task: Docker@2
      displayName: Push image
      inputs:
        containerRegistry: 'K8SExampleRegistry'
        repository: '$(imageRepository)'
        command: 'push'
        tags: '$(tag)'

    - upload: manifests
      artifact: manifests

# - stage: Deploy
#   displayName: Deploy stage
#   dependsOn: Build
# 
#   jobs:
#   - deployment: Deploy
#     displayName: Deploy
#     pool:
#       vmImage: $(vmImageName)
#     environment: 'rHueihellovue3.default'
#     strategy:
#       runOnce:
#         deploy:
#           steps:
#           - task: KubernetesManifest@0
#             displayName: Create imagePullSecret
#             inputs:
#               action: createSecret
#               secretName: $(imagePullSecret)
#               dockerRegistryEndpoint: $(dockerRegistryServiceConnection)
# 
#           - task: KubernetesManifest@0
#             displayName: Deploy to Kubernetes cluster
#             inputs:
#               action: deploy
#               manifests: |
#                 $(Pipeline.Workspace)/manifests/deployment.yml
#                 $(Pipeline.Workspace)/manifests/service.yml
#               imagePullSecrets: |
#                 $(imagePullSecret)
#               containers: |
#                 $(containerRegistry)/$(imageRepository):$(tag)

