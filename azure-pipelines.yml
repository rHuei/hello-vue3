# Deploy to Azure Kubernetes Service

# Build and push image to Azure Container Registry; Deploy to Azure Kubernetes Service
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
- master

resources:
- repo: self

variables:

  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: 'c45aa3e4-3c35-4055-8024-ccc9e2be55e2'
  imageRepository: 'hellovue'
  containerRegistry: 'k8sexampleregistry.azurecr.io'
  dockerfilePath: '**/Dockerfile'
  tag: '$(Build.BuildId)'
  imagePullSecret: 'k8sexampleregistry5580-auth'
  imageName: $(containerRegistry)/$(imageRepository):$(tag)

  # Agent VM image name
  vmImageName: 'ubuntu-latest'


stages:
- stage: Scan
  displayName: Scan stage
  jobs:
  - job: Scan
    displayName: Scan
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: SonarQubePrepare@5
      inputs:
        SonarQube: 'SonarQube'
        scannerMode: 'CLI'
        configMode: 'manual'
        cliProjectKey: 'SynnexPOC_SynnexPOC'
        cliSources: '.'
        extraProperties: |
          # Additional properties that will be passed to the scanner, 
          # Put one key=value per line, example:
          # sonar.exclusions=**/*.bin
    - script: |
        FILTERED_PARAMS=$(echo $SONARQUBE_SCANNER_PARAMS | sed 's/"sonar.branch.name":"[^"]*"\,//g')
        echo "##vso[task.setvariable variable=SONARQUBE_SCANNER_PARAMS]$FILTERED_PARAMS"
      displayName: Filter out non-CE sonar parameters
    - task: SonarQubeAnalyze@5
    - task: SonarQubePublish@5
      inputs:
        pollingTimeoutSec: '300'

- stage: Build
  displayName: Build stage
  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Docker@2
      displayName: Build image
      inputs:
        containerRegistry: 'K8SExampleRegistry'
        repository: '$(imageRepository)'
        command: 'build'
        Dockerfile: '**/Dockerfile'
        tags: '$(tag)'

    - script: |
        export TRIVY_VERSION=$(wget -qO - "https://api.github.com/repos/aquasecurity/trivy/releases/latest" | grep '"tag_name":' | sed -E 's/.*"v([^"]+)".*/\1/')
        echo "Trivy version: $TRIVY_VERSION"
        wget --no-verbose https://github.com/aquasecurity/trivy/releases/download/v${TRIVY_VERSION}/trivy_${TRIVY_VERSION}_Linux-64bit.tar.gz -O - | tar -zxvf -
        ./trivy -v
      displayName: 'Download and install Trivy'

    - task: CmdLine@2
      displayName: "Run trivy scan"
      inputs:
        script: |
          ./trivy image --exit-code 0 --severity LOW,MEDIUM,HIGH --format template --template "@contrib/junit.tpl" -o $(System.DefaultWorkingDirectory)/junit-report-low-med-high.xml $(imageName)
          ./trivy image --exit-code 0 --severity CRITICAL --format template --template "@contrib/junit.tpl" -o $(System.DefaultWorkingDirectory)/junit-report-critical.xml $(imageName)

    - task: PublishTestResults@2
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '**/junit-report-*.xml'
        mergeTestResults: true
        testRunTitle: 'Trivy Scan Vulnerabilities'
      condition: always()

    - bash: |
        docker run -d -p 80:8080 $(imageName)
        docker ps
      displayName: 'App Container'

    - task: owaspzap@1
      inputs:
        aggressivemode: true
        threshold: '50'
        port: '80'
      displayName: 'Zap Scan'

    - bash: |
        sudo npm install -g handlebars-cmd
        sudo cat <<EOF > owaspzap/nunit-template.hbs
        {{#each site}}
        <test-run
            id="2"
            name="Owasp test"
            start-time="{{../[@generated]}}"  >
            <test-suite
                id="{{@index}}"
                type="Assembly"
                name="{{[@name]}}"
                result="Failed"
                failed="{{alerts.length}}">
                <attachments>
                    <attachment>
                        <filePath>owaspzap/report.html</filePath>
                    </attachment>
                </attachments>
            {{#each alerts}}<test-case
                id="{{@index}}"
                name="{{alert}}"
                result="Failed"
                fullname="{{alert}}"
                time="1">
                    <failure>
                            <message>
                             <![CDATA[{{{desc}}}]]>
                        </message>
                        <stack-trace>
                            <![CDATA[
        Solution:
        {{{solution}}}
        Reference:
        {{{reference}}}
        instances:{{#each instances}}
        * {{uri}}
            - {{method}}
            {{#if evidence}}- {{{evidence}}}{{/if}}
                             {{/each}}]]>
                         </stack-trace>
                    </failure>
            </test-case>
            {{/each}}
            </test-suite>
        </test-run>
        {{/each}}
        EOF
      displayName: 'Owasp Nunit Template'

    - bash: |
        handlebars owaspzap/report.json < owaspzap/nunit-template.hbs > owaspzap/test-results.xml
        cat owaspzap/test-results.xml
      displayName: 'generate nunit type file'
      condition: always()

    - task: PublishTestResults@2
      displayName: 'Publish Test Results **/TEST-*.xml'
      inputs:
        testResultsFormat: 'NUnit'
        testResultsFiles: 'owaspzap/test-results.xml'
      condition: always()

    - task: Docker@2
      displayName: Push image
      inputs:
        containerRegistry: 'K8SExampleRegistry'
        repository: '$(imageRepository)'
        command: 'push'
        tags: '$(tag)'

    - upload: manifests
      artifact: manifests

- stage: Deploy
  displayName: Deploy stage
  dependsOn: Build

  jobs:
  - deployment: Deploy
    displayName: Deploy
    pool:
      vmImage: $(vmImageName)
    environment: 'rHueihellovue3.default'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: KubernetesManifest@0
            displayName: Create imagePullSecret
            inputs:
              action: createSecret
              secretName: $(imagePullSecret)
              dockerRegistryEndpoint: $(dockerRegistryServiceConnection)

          - task: KubernetesManifest@0
            displayName: Deploy to Kubernetes cluster
            inputs:
              action: deploy
              manifests: |
                $(Pipeline.Workspace)/manifests/deployment.yml
                $(Pipeline.Workspace)/manifests/service.yml
              imagePullSecrets: |
                $(imagePullSecret)
              containers: |
                $(containerRegistry)/$(imageRepository):$(tag)

